"""Initial database schema

Revision ID: 1c66065832d1
Revises: 
Create Date: 2025-09-28 01:25:39.923026

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1c66065832d1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('username', sa.String(length=150), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=150), nullable=True),
    sa.Column('last_name', sa.String(length=150), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'VIEWER', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('profile_picture_url', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("email LIKE '%_@_%.__%'", name='check_email_format'),
    sa.CheckConstraint('LENGTH(first_name) <= 150', name='check_first_name_max_length'),
    sa.CheckConstraint('LENGTH(last_name) <= 150', name='check_last_name_max_length'),
    sa.CheckConstraint('LENGTH(username) >= 3', name='check_username_min_length'),
    sa.CheckConstraint('failed_login_attempts >= 0', name='check_failed_attempts_positive'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_integrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('service_type', sa.Enum('SLACK', 'GOOGLE_WORKSPACE', 'MICROSOFT_365', 'SALESFORCE', 'STRIPE', 'TWILIO', 'SENDGRID', 'WEBHOOKS', name='integrationtype'), nullable=False),
    sa.Column('api_endpoint', sa.String(length=2048), nullable=True),
    sa.Column('auth_type', sa.String(length=50), nullable=False),
    sa.Column('auth_data', sa.JSON(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('error_count', sa.Integer(), nullable=False),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('rate_limit_remaining', sa.Integer(), nullable=True),
    sa.Column('rate_limit_reset', sa.DateTime(), nullable=True),
    sa.Column('webhook_url', sa.String(length=2048), nullable=True),
    sa.Column('webhook_secret', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("auth_type IN ('api_key', 'oauth2', 'basic', 'bearer', 'custom')", name='check_valid_auth_type'),
    sa.CheckConstraint('LENGTH(name) >= 1', name='check_name_not_empty'),
    sa.CheckConstraint('error_count >= 0', name='check_error_count_positive'),
    sa.CheckConstraint('rate_limit > 0', name='check_rate_limit_positive'),
    sa.CheckConstraint('rate_limit_remaining >= 0', name='check_rate_limit_remaining_positive'),
    sa.CheckConstraint('usage_count >= 0', name='check_usage_count_positive'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='unique_integration_name_per_user')
    )
    op.create_index('idx_integration_active', 'api_integrations', ['is_active'], unique=False)
    op.create_index('idx_integration_owner_service_type', 'api_integrations', ['owner_id', 'service_type'], unique=False)
    op.create_index(op.f('ix_api_integrations_id'), 'api_integrations', ['id'], unique=False)
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('key_prefix', sa.String(length=10), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('rate_limit', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('rate_limit > 0', name='check_rate_limit_positive'),
    sa.CheckConstraint('usage_count >= 0', name='check_usage_count_positive'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='unique_api_key_name_per_user')
    )
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', sa.String(length=100), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('LENGTH(action) >= 1', name='check_action_not_empty'),
    sa.CheckConstraint('LENGTH(resource_type) >= 1', name='check_resource_type_not_empty'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_log_action', 'audit_logs', ['action'], unique=False)
    op.create_index('idx_audit_log_created_at', 'audit_logs', ['created_at'], unique=False)
    op.create_index('idx_audit_log_resource_type', 'audit_logs', ['resource_type'], unique=False)
    op.create_index('idx_audit_log_success', 'audit_logs', ['success'], unique=False)
    op.create_index('idx_audit_log_user_id', 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_table('email_campaigns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('subject', sa.String(length=998), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=False),
    sa.Column('recipients', sa.JSON(), nullable=False),
    sa.Column('sender_name', sa.String(length=255), nullable=True),
    sa.Column('sender_email', sa.String(length=320), nullable=True),
    sa.Column('reply_to', sa.String(length=320), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('scheduled_time', sa.DateTime(), nullable=True),
    sa.Column('sent_time', sa.DateTime(), nullable=True),
    sa.Column('recipient_count', sa.Integer(), nullable=False),
    sa.Column('delivery_rate', sa.Float(), nullable=False),
    sa.Column('open_rate', sa.Float(), nullable=False),
    sa.Column('click_rate', sa.Float(), nullable=False),
    sa.Column('bounce_rate', sa.Float(), nullable=False),
    sa.Column('unsubscribe_rate', sa.Float(), nullable=False),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("content_type IN ('html', 'text')", name='check_valid_content_type'),
    sa.CheckConstraint("status IN ('draft', 'scheduled', 'sending', 'sent', 'failed', 'cancelled')", name='check_valid_status'),
    sa.CheckConstraint('LENGTH(name) >= 1', name='check_name_not_empty'),
    sa.CheckConstraint('LENGTH(subject) >= 1', name='check_subject_not_empty'),
    sa.CheckConstraint('bounce_rate >= 0 AND bounce_rate <= 100', name='check_bounce_rate_range'),
    sa.CheckConstraint('click_rate >= 0 AND click_rate <= 100', name='check_click_rate_range'),
    sa.CheckConstraint('delivery_rate >= 0 AND delivery_rate <= 100', name='check_delivery_rate_range'),
    sa.CheckConstraint('open_rate >= 0 AND open_rate <= 100', name='check_open_rate_range'),
    sa.CheckConstraint('recipient_count >= 0', name='check_recipient_count_positive'),
    sa.CheckConstraint('unsubscribe_rate >= 0 AND unsubscribe_rate <= 100', name='check_unsubscribe_rate_range'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_campaign_owner_status', 'email_campaigns', ['owner_id', 'status'], unique=False)
    op.create_index('idx_campaign_scheduled_time', 'email_campaigns', ['scheduled_time'], unique=False)
    op.create_index(op.f('ix_email_campaigns_id'), 'email_campaigns', ['id'], unique=False)
    op.create_table('scheduled_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('task_type', sa.Enum('WORKFLOW', 'EMAIL', 'API_CALL', 'SCHEDULED_REPORT', 'DATA_SYNC', name='tasktype'), nullable=False),
    sa.Column('schedule_expression', sa.String(length=255), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('task_data', sa.JSON(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('next_run', sa.DateTime(), nullable=True),
    sa.Column('last_run', sa.DateTime(), nullable=True),
    sa.Column('last_status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='executionstatus'), nullable=True),
    sa.Column('execution_count', sa.Integer(), nullable=False),
    sa.Column('success_count', sa.Integer(), nullable=False),
    sa.Column('failure_count', sa.Integer(), nullable=False),
    sa.Column('average_duration', sa.Float(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('retry_delay', sa.Integer(), nullable=False),
    sa.Column('timeout', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('LENGTH(name) >= 1', name='check_name_not_empty'),
    sa.CheckConstraint('LENGTH(schedule_expression) >= 5', name='check_cron_expression_not_empty'),
    sa.CheckConstraint('average_duration >= 0', name='check_average_duration_positive'),
    sa.CheckConstraint('execution_count >= 0', name='check_execution_count_positive'),
    sa.CheckConstraint('failure_count >= 0', name='check_failure_count_positive'),
    sa.CheckConstraint('max_retries >= 0', name='check_max_retries_positive'),
    sa.CheckConstraint('retry_delay > 0', name='check_retry_delay_positive'),
    sa.CheckConstraint('success_count >= 0', name='check_success_count_positive'),
    sa.CheckConstraint('timeout > 0', name='check_timeout_positive'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_scheduled_task_next_run', 'scheduled_tasks', ['next_run'], unique=False)
    op.create_index('idx_scheduled_task_owner_active', 'scheduled_tasks', ['owner_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_scheduled_tasks_id'), 'scheduled_tasks', ['id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('theme', sa.String(length=20), nullable=False),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=False),
    sa.Column('email_notifications', sa.Boolean(), nullable=False),
    sa.Column('workflow_notifications', sa.Boolean(), nullable=False),
    sa.Column('security_notifications', sa.Boolean(), nullable=False),
    sa.Column('weekly_reports', sa.Boolean(), nullable=False),
    sa.Column('dashboard_layout', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("theme IN ('light', 'dark', 'auto')", name='check_valid_theme'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_user_preferences_id'), 'user_preferences', ['id'], unique=False)
    op.create_table('workflow_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('nodes', sa.JSON(), nullable=False),
    sa.Column('edges', sa.JSON(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('rating_average', sa.Float(), nullable=False),
    sa.Column('rating_count', sa.Integer(), nullable=False),
    sa.Column('complexity_level', sa.String(length=20), nullable=False),
    sa.Column('estimated_setup_time', sa.Integer(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("complexity_level IN ('beginner', 'intermediate', 'advanced')", name='check_valid_complexity'),
    sa.CheckConstraint('LENGTH(category) >= 1', name='check_category_not_empty'),
    sa.CheckConstraint('LENGTH(name) >= 1', name='check_name_not_empty'),
    sa.CheckConstraint('estimated_setup_time > 0', name='check_setup_time_positive'),
    sa.CheckConstraint('rating_average >= 0 AND rating_average <= 5', name='check_rating_average_range'),
    sa.CheckConstraint('rating_count >= 0', name='check_rating_count_positive'),
    sa.CheckConstraint('usage_count >= 0', name='check_usage_count_positive'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_template_category', 'workflow_templates', ['category'], unique=False)
    op.create_index('idx_template_public_verified', 'workflow_templates', ['is_public', 'is_verified'], unique=False)
    op.create_index('idx_template_usage_count', 'workflow_templates', ['usage_count'], unique=False)
    op.create_index(op.f('ix_workflow_templates_id'), 'workflow_templates', ['id'], unique=False)
    op.create_table('workflows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('nodes', sa.JSON(), nullable=False),
    sa.Column('edges', sa.JSON(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'INACTIVE', 'ARCHIVED', name='workflowstatus'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('execution_count', sa.Integer(), nullable=False),
    sa.Column('success_count', sa.Integer(), nullable=False),
    sa.Column('failure_count', sa.Integer(), nullable=False),
    sa.Column('average_duration', sa.Float(), nullable=False),
    sa.Column('last_executed', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('LENGTH(name) >= 1', name='check_name_not_empty'),
    sa.CheckConstraint('average_duration >= 0', name='check_average_duration_positive'),
    sa.CheckConstraint('execution_count >= 0', name='check_execution_count_positive'),
    sa.CheckConstraint('failure_count >= 0', name='check_failure_count_positive'),
    sa.CheckConstraint('success_count >= 0', name='check_success_count_positive'),
    sa.CheckConstraint('version > 0', name='check_version_positive'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_workflow_category', 'workflows', ['category'], unique=False)
    op.create_index('idx_workflow_owner_status', 'workflows', ['owner_id', 'status'], unique=False)
    op.create_index(op.f('ix_workflows_id'), 'workflows', ['id'], unique=False)
    op.create_table('email_analytics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('campaign_id', sa.Integer(), nullable=False),
    sa.Column('emails_sent', sa.Integer(), nullable=False),
    sa.Column('emails_delivered', sa.Integer(), nullable=False),
    sa.Column('emails_opened', sa.Integer(), nullable=False),
    sa.Column('unique_opens', sa.Integer(), nullable=False),
    sa.Column('links_clicked', sa.Integer(), nullable=False),
    sa.Column('unique_clicks', sa.Integer(), nullable=False),
    sa.Column('bounced', sa.Integer(), nullable=False),
    sa.Column('soft_bounces', sa.Integer(), nullable=False),
    sa.Column('hard_bounces', sa.Integer(), nullable=False),
    sa.Column('unsubscribed', sa.Integer(), nullable=False),
    sa.Column('spam_complaints', sa.Integer(), nullable=False),
    sa.Column('forwarded', sa.Integer(), nullable=False),
    sa.Column('click_tracking_data', sa.JSON(), nullable=True),
    sa.Column('geographic_data', sa.JSON(), nullable=True),
    sa.Column('device_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('bounced >= 0', name='check_bounced_positive'),
    sa.CheckConstraint('emails_delivered <= emails_sent', name='check_delivered_not_exceed_sent'),
    sa.CheckConstraint('emails_delivered >= 0', name='check_emails_delivered_positive'),
    sa.CheckConstraint('emails_opened >= 0', name='check_emails_opened_positive'),
    sa.CheckConstraint('emails_sent >= 0', name='check_emails_sent_positive'),
    sa.CheckConstraint('hard_bounces >= 0', name='check_hard_bounces_positive'),
    sa.CheckConstraint('links_clicked >= 0', name='check_links_clicked_positive'),
    sa.CheckConstraint('soft_bounces + hard_bounces = bounced', name='check_bounces_consistency'),
    sa.CheckConstraint('soft_bounces >= 0', name='check_soft_bounces_positive'),
    sa.CheckConstraint('spam_complaints >= 0', name='check_spam_complaints_positive'),
    sa.CheckConstraint('unique_clicks <= links_clicked', name='check_unique_clicks_logical'),
    sa.CheckConstraint('unique_clicks >= 0', name='check_unique_clicks_positive'),
    sa.CheckConstraint('unique_opens <= emails_opened', name='check_unique_opens_logical'),
    sa.CheckConstraint('unique_opens >= 0', name='check_unique_opens_positive'),
    sa.CheckConstraint('unsubscribed >= 0', name='check_unsubscribed_positive'),
    sa.ForeignKeyConstraint(['campaign_id'], ['email_campaigns.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_email_analytics_id'), 'email_analytics', ['id'], unique=False)
    op.create_table('integration_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('integration_id', sa.Integer(), nullable=False),
    sa.Column('request_method', sa.String(length=10), nullable=False),
    sa.Column('request_url', sa.String(length=2048), nullable=False),
    sa.Column('request_headers', sa.JSON(), nullable=True),
    sa.Column('request_body', sa.Text(), nullable=True),
    sa.Column('response_status', sa.Integer(), nullable=True),
    sa.Column('response_headers', sa.JSON(), nullable=True),
    sa.Column('response_body', sa.Text(), nullable=True),
    sa.Column('response_time', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("request_method IN ('GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS')", name='check_valid_http_method'),
    sa.CheckConstraint('response_status >= 100 AND response_status < 600', name='check_valid_http_status'),
    sa.CheckConstraint('response_time >= 0', name='check_response_time_positive'),
    sa.ForeignKeyConstraint(['integration_id'], ['api_integrations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_integration_log_created_at', 'integration_logs', ['created_at'], unique=False)
    op.create_index('idx_integration_log_integration_id', 'integration_logs', ['integration_id'], unique=False)
    op.create_index('idx_integration_log_status', 'integration_logs', ['response_status'], unique=False)
    op.create_index(op.f('ix_integration_logs_id'), 'integration_logs', ['id'], unique=False)
    op.create_table('task_executions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scheduled_task_id', sa.Integer(), nullable=False),
    sa.Column('execution_id', sa.String(length=100), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='executionstatus'), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('result_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('duration >= 0', name='check_duration_positive'),
    sa.CheckConstraint('retry_count >= 0', name='check_retry_count_positive'),
    sa.ForeignKeyConstraint(['scheduled_task_id'], ['scheduled_tasks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('execution_id')
    )
    op.create_index('idx_task_execution_scheduled_task', 'task_executions', ['scheduled_task_id'], unique=False)
    op.create_index('idx_task_execution_status', 'task_executions', ['status'], unique=False)
    op.create_index(op.f('ix_task_executions_id'), 'task_executions', ['id'], unique=False)
    op.create_table('template_ratings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('review', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='check_rating_range'),
    sa.ForeignKeyConstraint(['template_id'], ['workflow_templates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('template_id', 'user_id', name='unique_rating_per_user_template')
    )
    op.create_index(op.f('ix_template_ratings_id'), 'template_ratings', ['id'], unique=False)
    op.create_table('workflow_executions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('execution_id', sa.String(length=100), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='executionstatus'), nullable=False),
    sa.Column('triggered_by', sa.String(length=50), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('execution_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_type', sa.String(length=100), nullable=True),
    sa.Column('stack_trace', sa.Text(), nullable=True),
    sa.Column('nodes_executed', sa.JSON(), nullable=True),
    sa.Column('resources_used', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("triggered_by IN ('manual', 'scheduled', 'api', 'webhook')", name='check_valid_trigger'),
    sa.CheckConstraint('duration >= 0', name='check_duration_positive'),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('execution_id')
    )
    op.create_index('idx_execution_start_time', 'workflow_executions', ['start_time'], unique=False)
    op.create_index('idx_execution_workflow_status', 'workflow_executions', ['workflow_id', 'status'], unique=False)
    op.create_index(op.f('ix_workflow_executions_id'), 'workflow_executions', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workflow_executions_id'), table_name='workflow_executions')
    op.drop_index('idx_execution_workflow_status', table_name='workflow_executions')
    op.drop_index('idx_execution_start_time', table_name='workflow_executions')
    op.drop_table('workflow_executions')
    op.drop_index(op.f('ix_template_ratings_id'), table_name='template_ratings')
    op.drop_table('template_ratings')
    op.drop_index(op.f('ix_task_executions_id'), table_name='task_executions')
    op.drop_index('idx_task_execution_status', table_name='task_executions')
    op.drop_index('idx_task_execution_scheduled_task', table_name='task_executions')
    op.drop_table('task_executions')
    op.drop_index(op.f('ix_integration_logs_id'), table_name='integration_logs')
    op.drop_index('idx_integration_log_status', table_name='integration_logs')
    op.drop_index('idx_integration_log_integration_id', table_name='integration_logs')
    op.drop_index('idx_integration_log_created_at', table_name='integration_logs')
    op.drop_table('integration_logs')
    op.drop_index(op.f('ix_email_analytics_id'), table_name='email_analytics')
    op.drop_table('email_analytics')
    op.drop_index(op.f('ix_workflows_id'), table_name='workflows')
    op.drop_index('idx_workflow_owner_status', table_name='workflows')
    op.drop_index('idx_workflow_category', table_name='workflows')
    op.drop_table('workflows')
    op.drop_index(op.f('ix_workflow_templates_id'), table_name='workflow_templates')
    op.drop_index('idx_template_usage_count', table_name='workflow_templates')
    op.drop_index('idx_template_public_verified', table_name='workflow_templates')
    op.drop_index('idx_template_category', table_name='workflow_templates')
    op.drop_table('workflow_templates')
    op.drop_index(op.f('ix_user_preferences_id'), table_name='user_preferences')
    op.drop_table('user_preferences')
    op.drop_index(op.f('ix_scheduled_tasks_id'), table_name='scheduled_tasks')
    op.drop_index('idx_scheduled_task_owner_active', table_name='scheduled_tasks')
    op.drop_index('idx_scheduled_task_next_run', table_name='scheduled_tasks')
    op.drop_table('scheduled_tasks')
    op.drop_index(op.f('ix_email_campaigns_id'), table_name='email_campaigns')
    op.drop_index('idx_campaign_scheduled_time', table_name='email_campaigns')
    op.drop_index('idx_campaign_owner_status', table_name='email_campaigns')
    op.drop_table('email_campaigns')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index('idx_audit_log_user_id', table_name='audit_logs')
    op.drop_index('idx_audit_log_success', table_name='audit_logs')
    op.drop_index('idx_audit_log_resource_type', table_name='audit_logs')
    op.drop_index('idx_audit_log_created_at', table_name='audit_logs')
    op.drop_index('idx_audit_log_action', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_api_integrations_id'), table_name='api_integrations')
    op.drop_index('idx_integration_owner_service_type', table_name='api_integrations')
    op.drop_index('idx_integration_active', table_name='api_integrations')
    op.drop_table('api_integrations')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
